// utils/initialData.js
import {
  saveInventory,
  savePhysicalCash,
  getInventory,
  getPhysicalCash,
  setIsMobileMoneyAgentStatus,
} from "../storage/transactionStorage";
import { Alert } from "react-native";
import { getDB } from "../db/database"; // Needed to ensure DB is open before populating

const INITIAL_PHYSICAL_CASH_AMOUNT = 0; // UGX 100,000 initial cash

// --- Initial Inventory Data for Common Ugandan Products ---
const initialInventoryData = [
  // Beverages
  {
    id: "item_001_500ml_coke",
    name: "Coca-Cola",
    category: "Beverages",
    quantity: 25,
    unit: "bottle",
    packSize: 500,
    packUnit: "ml",
    spokenUnits: ["bottle", "bottles", "soda", "sodas", "500ml", "small coke"],
    keywords: ["coca-cola", "coke", "cola", "soda"],
    costPrice: 1800,
    sellingPrice: 2500,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_001_1l_coke",
    name: "Coca-Cola",
    category: "Beverages",
    quantity: 10,
    unit: "bottle",
    packSize: 1,
    packUnit: "L",
    spokenUnits: ["bottle", "bottles", "soda", "sodas", "1 litre", "big coke"],
    keywords: ["coca-cola", "coke", "cola", "soda"],
    costPrice: 3000,
    sellingPrice: 3800,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_012_1l_water",
    name: "Mineral Water",
    category: "Beverages",
    quantity: 20,
    unit: "bottle",
    packSize: 1,
    packUnit: "L",
    spokenUnits: [
      "bottle",
      "bottles",
      "water",
      "waters",
      "1 litre water",
      "rwenzori",
    ],
    keywords: ["mineral water", "rwenzori", "water", "aquafina"],
    costPrice: 900,
    sellingPrice: 1300,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_002_nile_special",
    name: "Nile Special Beer",
    category: "Alcoholic Beverages",
    quantity: 12,
    unit: "bottle",
    packSize: 500,
    packUnit: "ml",
    spokenUnits: ["bottle", "bottles", "beer", "beers", "nile"],
    keywords: ["nile special", "nile", "beer", "alcohol"],
    costPrice: 3500,
    sellingPrice: 4500,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_015_club_beer",
    name: "Club Beer",
    category: "Alcoholic Beverages",
    quantity: 10,
    unit: "bottle",
    packSize: 500,
    packUnit: "ml",
    spokenUnits: ["bottle", "bottles", "beer", "club"],
    keywords: ["club", "beer", "alcohol"],
    costPrice: 3400,
    sellingPrice: 4400,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },

  // Household Items
  {
    id: "item_004_100g_omo",
    name: "Omo Detergent",
    category: "Household Items",
    quantity: 15,
    unit: "sachet",
    packSize: 100,
    packUnit: "g",
    spokenUnits: [
      "sachet",
      "sachets",
      "packet",
      "packets",
      "100 grams",
      "small omo",
    ],
    keywords: ["omo", "detergent", "soap", "washing powder"],
    costPrice: 900,
    sellingPrice: 1200,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_004_500g_omo",
    name: "Omo Detergent",
    category: "Household Items",
    quantity: 8,
    unit: "pack",
    packSize: 500,
    packUnit: "g",
    spokenUnits: ["pack", "packs", "500 grams", "half kg omo"],
    keywords: ["omo", "detergent", "soap", "washing powder"],
    costPrice: 3500,
    sellingPrice: 4200,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_004_1kg_omo",
    name: "Omo Detergent",
    category: "Household Items",
    quantity: 5,
    unit: "bag",
    packSize: 1,
    packUnit: "kg",
    spokenUnits: ["bag", "bags", "kilogram", "kilograms", "1 kg", "big omo"],
    keywords: ["omo", "detergent", "soap", "washing powder"],
    costPrice: 6500,
    sellingPrice: 7800,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_013_matches",
    name: "Matches",
    category: "Household Items",
    quantity: 50,
    unit: "box",
    packSize: 1,
    packUnit: "box",
    spokenUnits: ["box", "boxes", "matchbox"],
    keywords: ["matches", "fire"],
    costPrice: 200,
    sellingPrice: 300,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_014_candle",
    name: "Candle",
    category: "Household Items",
    quantity: 40,
    unit: "piece",
    packSize: 1,
    packUnit: "piece",
    spokenUnits: ["piece", "pieces", "candle", "candles"],
    keywords: ["candle", "light"],
    costPrice: 500,
    sellingPrice: 700,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_016_soap_bar",
    name: "Washing Soap Bar",
    category: "Household Items",
    quantity: 25,
    unit: "bar",
    packSize: 1,
    packUnit: "bar",
    spokenUnits: ["bar", "bars", "soap", "washing soap"],
    keywords: ["soap", "washing", "bar soap"],
    costPrice: 2000,
    sellingPrice: 2500,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_017_bathing_soap",
    name: "Bathing Soap",
    category: "Toiletries",
    quantity: 30,
    unit: "bar",
    packSize: 1,
    packUnit: "bar",
    spokenUnits: ["bar", "bars", "bathing soap", "toilet soap"],
    keywords: ["bathing soap", "toiletries", "soap"],
    costPrice: 1500,
    sellingPrice: 1800,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_009_toothpaste_small",
    name: "Toothpaste",
    category: "Toiletries",
    quantity: 18,
    unit: "tube",
    packSize: 50,
    packUnit: "g",
    spokenUnits: ["tube", "tubes", "small toothpaste"],
    keywords: ["toothpaste", "colgate", "closeup", "oral hygiene"],
    costPrice: 1500,
    sellingPrice: 2000,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },

  // Dry Goods / Groceries
  {
    id: "item_005_1kg_sugar",
    name: "Sugar",
    category: "Dry Goods",
    quantity: 10,
    unit: "kg",
    packSize: 1,
    packUnit: "kg",
    spokenUnits: ["kilogram", "kilograms", "kg", "sugar"],
    keywords: ["sugar", "sweetener"],
    costPrice: 4200,
    sellingPrice: 4500,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_005_2kg_sugar",
    name: "Sugar",
    category: "Dry Goods",
    quantity: 5,
    unit: "bag",
    packSize: 2,
    packUnit: "kg",
    spokenUnits: ["kilogram", "kilograms", "kg", "bag", "bags", "2 kg sugar"],
    keywords: ["sugar", "sweetener"],
    costPrice: 8000,
    sellingPrice: 8500,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_006_500g_salt",
    name: "Salt",
    category: "Dry Goods",
    quantity: 20,
    unit: "packet",
    packSize: 500,
    packUnit: "g",
    spokenUnits: ["packet", "packets", "500 grams", "half kg salt"],
    keywords: ["salt", "cooking"],
    costPrice: 800,
    sellingPrice: 1000,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_007_2kg_maize_flour",
    name: "Maize Flour",
    category: "Dry Goods",
    quantity: 8,
    unit: "bag",
    packSize: 2,
    packUnit: "kg",
    spokenUnits: [
      "bag",
      "bags",
      "sack",
      "sacks",
      "2 kg",
      "kilogram",
      "kilograms",
      "posho flour",
    ],
    keywords: ["maize flour", "flour", "posho", "unga", "kasana"],
    costPrice: 5000,
    sellingPrice: 5500,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_008_1l_cooking_oil",
    name: "Cooking Oil",
    category: "Groceries",
    quantity: 7,
    unit: "bottle",
    packSize: 1,
    packUnit: "L",
    spokenUnits: [
      "bottle",
      "bottles",
      "litre",
      "litres",
      "1 litre oil",
      "mukwano",
    ],
    keywords: ["mukwano", "cooking oil", "oil", "sunflower oil"],
    costPrice: 6500,
    sellingPrice: 7000,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_003_riham_biscuits",
    name: "Riham Biscuits",
    category: "Snacks",
    quantity: 30,
    unit: "pack",
    packSize: 1,
    packUnit: "pack",
    spokenUnits: ["pack", "packs", "packet", "packets", "biscuit", "biscuits"],
    keywords: ["riham", "biscuits", "snacks"],
    costPrice: 1200,
    sellingPrice: 1500,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_018_bread",
    name: "Bread",
    category: "Bakery",
    quantity: 15,
    unit: "loaf",
    packSize: 1,
    packUnit: "loaf",
    spokenUnits: ["loaf", "loaves", "bread"],
    keywords: ["bread", "bakery", "rolex"],
    costPrice: 3000,
    sellingPrice: 3500,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },
  {
    id: "item_019_eggs_tray",
    name: "Eggs (Tray)",
    category: "Groceries",
    quantity: 5,
    unit: "tray",
    packSize: 30,
    packUnit: "eggs",
    spokenUnits: ["tray", "trays", "eggs", "egg tray"],
    keywords: ["eggs", "tray"],
    costPrice: 11000,
    sellingPrice: 12000,
    isMobileMoneyAgent: false,
    isService: false,
    commissionEarned: 0,
  },

  // Mobile Services (These represent the "float" for different networks)
  {
    id: "item_010_mtn_airtime",
    name: "MTN Airtime",
    category: "Mobile Services",
    quantity: 99999999,
    unit: "service",
    packSize: 0,
    packUnit: "",
    spokenUnits: [
      "shillings",
      "shs",
      "k",
      "thousand",
      "units",
      "mtn",
      "airtime",
    ],
    keywords: ["mtn", "airtime", "credit", "top up", "mobile money"],
    costPrice: 0,
    sellingPrice: 0,
    isMobileMoneyAgent: true,
    isService: true,
    commissionEarned: 0.05,
  }, // Commission %
  {
    id: "item_011_airtel_airtime",
    name: "Airtel Airtime",
    category: "Mobile Services",
    quantity: 99999999,
    unit: "service",
    packSize: 0,
    packUnit: "",
    spokenUnits: [
      "shillings",
      "shs",
      "k",
      "thousand",
      "units",
      "airtel",
      "airtime",
    ],
    keywords: ["airtel", "airtime", "credit", "top up", "mobile money"],
    costPrice: 0,
    sellingPrice: 0,
    isMobileMoneyAgent: true,
    isService: true,
    commissionEarned: 0.045,
  }, // Commission %
  {
    id: "item_020_mtn_mobile_money_service",
    name: "MTN Mobile Money Service",
    category: "Mobile Money",
    quantity: 99999999,
    unit: "float",
    packSize: 0,
    packUnit: "",
    spokenUnits: ["shillings", "shs", "k", "thousand", "mtn mobile money"],
    keywords: ["mtn", "mobile money", "withdrawal", "deposit", "float"],
    costPrice: 0,
    sellingPrice: 0,
    isMobileMoneyAgent: true,
    isService: true,
    commissionEarned: 0,
  }, // Commission is tier-based, handled in saveTransaction
  {
    id: "item_021_airtel_mobile_money_service",
    name: "Airtel Mobile Money Service",
    category: "Mobile Money",
    quantity: 99999999,
    unit: "float",
    packSize: 0,
    packUnit: "",
    spokenUnits: ["shillings", "shs", "k", "thousand", "airtel mobile money"],
    keywords: ["airtel", "mobile money", "withdrawal", "deposit", "float"],
    costPrice: 0,
    sellingPrice: 0,
    isMobileMoneyAgent: true,
    isService: true,
    commissionEarned: 0,
  }, // Commission is tier-based, handled in saveTransaction
];

export const populateInitialData = async () => {
  try {
    // Ensure database is initialized before trying to populate
    await getDB();

    // Check if inventory is empty before populating
    const existingInventory = await getInventory();
    if (existingInventory && existingInventory.length === 0) {
      await saveInventory(initialInventoryData);
      console.log("SQLite populated with initial shop inventory.");
      Alert.alert("Success", "Initial shop inventory loaded!");
    } else {
      console.log("Shop inventory already exists in SQLite. Not populating.");
    }

    // Initialize physical cash if it's currently 0 (from initial DB setup)
    const currentPhysicalCash = await getPhysicalCash();
    if (currentPhysicalCash === 0) {
      await savePhysicalCash(INITIAL_PHYSICAL_CASH_AMOUNT);
      console.log(
        `Initial physical cash set to UGX ${INITIAL_PHYSICAL_CASH_AMOUNT}.`
      );
    } else {
      console.log(`Physical cash already set: UGX ${currentPhysicalCash}.`);
    }

    // Set initial global isMobileMoneyAgent status to false if not set
    // This is a global setting, not related to specific items
    await setIsMobileMoneyAgentStatus(false);
    console.log(
      "Initial global isMobileMoneyAgent status checked/set to false."
    );
  } catch (error) {
    console.error("Error populating initial shop data:", error);
    Alert.alert(
      "Error",
      "Failed to populate initial shop data: " + error.message
    );
  }
};
