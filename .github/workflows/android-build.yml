name: Android Production Build

on:
  push:
    branches:
      - main # Or 'master', or any branch you want to trigger builds on
  workflow_dispatch: # Allows you to trigger the workflow manually from GitHub Actions UI (useful for testing)

jobs:
  build-android:
    runs-on: ubuntu-latest # GitHub-hosted runner with Android SDK, Node.js, Java

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Use a Node.js version compatible with your Expo SDK (e.g., 18.x, 20.x, or whatever your app uses)

      - name: Install dependencies
        run: npm install # Or 'yarn install' if you use Yarn

      - name: Set up Java Development Kit
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17" # Java 17 is generally recommended for recent Android/React Native versions

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 34 # IMPORTANT: Adjust to your app.json's android.targetSdkVersion. (e.g., 34, 33, 35)
          build-tools: 34.0.0 # IMPORTANT: Adjust to your app.json's android.buildToolsVersion (e.g., 34.0.0)
          # cmake: 3.22.1 # Uncomment if you have native modules that explicitly need CMake

      - name: Run expo prebuild
        # This generates the 'android' native folder based on your app.json and plugins.
        # '--no-install' prevents it from running npm/yarn install inside the generated native project.
        run: npx expo prebuild --platform android --clean --no-install

      - name: Create keystore file
        # This step decodes the Base64 keystore secret back into a .keystore file.
        # We're placing it directly in the 'android/' folder (root of the native project).
        # This is a common location and is easily referenced by Gradle.
        run: |
          echo "$ANDROID_SIGNING_KEYSTORE" | base64 --decode > android/my-upload-key.keystore
        env:
          ANDROID_SIGNING_KEYSTORE: ${{ secrets.ANDROID_SIGNING_KEYSTORE }}

      # Removed the 'Create `gradle.properties` for signing' step.
      # We will pass secrets as environment variables directly to Gradle in the build step.

      - name: Build Android Release APK
        # This command builds the release APK.
        # We now pass the signing credentials directly as environment variables to Gradle.
        # Gradle automatically picks up variables prefixed with 'ORG_GRADLE_PROJECT_' as project properties.
        # These variable names (storeFile, keyAlias, etc.) are the standard ones Gradle expects internally.
        run: cd android && ./gradlew assembleRelease
        env:
          ORG_GRADLE_PROJECT_storeFile: "my-upload-key.keystore" # This refers to the file placed in 'android/'
          ORG_GRADLE_PROJECT_keyAlias: "${{ secrets.ANDROID_KEY_ALIAS }}"
          ORG_GRADLE_PROJECT_storePassword: "${{ secrets.ANDROID_STORE_PASSWORD }}"
          ORG_GRADLE_PROJECT_keyPassword: "${{ secrets.ANDROID_KEY_PASSWORD }}"

      - name: Upload APK artifact
        # This makes the generated APK available for download from the GitHub Actions run summary.
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 7 # Optional: how long to keep the artifact on GitHub

      - name: Clean up sensitive keystore file
        # Important security step: remove the decoded keystore file from the runner's disk.
        # Updated path to reflect the new keystore location.
        run: rm android/my-upload-key.keystore
        if: always() # Always run this step, even if previous steps fail
